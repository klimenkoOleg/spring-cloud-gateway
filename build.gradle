assert System.getProperty('java.specification.version') == '1.8'
System.setProperty('file.encoding', 'utf-8')

buildscript {

    ext.springBootVersion = '2.2.4.RELEASE'
    ext.javaVersion = '1.8'

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        // Add your custom (e.g. inhouse Enterprise repositories here)
//		maven { url 'https://bank-gradle-plugin-repo/' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }

    configurations.classpath.resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
        failOnVersionConflict()
    }
}

apply plugin: 'idea'
apply plugin: 'java'  // this adds several dev convenient Gradle tasks: https://docs.gradle.org/current/userguide/java_plugin.html
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.oklimenko.sampleapp'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'


bootJar {
    mainClassName = 'com.oklimenko.sampleapp.SampleApplication'
}

repositories {
    mavenCentral()
    // add your enterprise repositories here
    //		maven { url 'https://bank-gradle-plugin-repo/' }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

allprojects {

    apply plugin: 'java'

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    repositories {
        // add you Enterprise repos
//		maven { url 'https://nexus.***/public/' }
        mavenCentral()
    }

    ext.versions = [:]
    ext.libs = [:]

    ext['springCloudVersion'] = 'Hoxton.RELEASE'
    versions.spring_boot = "${springBootVersion}"  // defined in buildscript section above

    versions.swagger2 = "2.9.2"
    versions.logstash_gelf = "1.13.0"
    versions.hamcrest = "1.3"
    versions.slf4j = "1.7.25"
    versions.h2 = "1.4.197"
    versions.postgresql = "42.2.5"
    versions.flyway = "5.2.4"
    versions.springSecurityJwt = "1.0.9.RELEASE"

    libs.spring_boot = [
            libs.spring_boot_starter = "org.springframework.boot:spring-boot-starter:${versions.spring_boot}",
            libs.spring_boot_starter_data = "org.springframework.boot:spring-boot-starter-data-jpa:${versions.spring_boot}",
            libs.spring_boot_starter_actuator = "org.springframework.boot:spring-boot-starter-actuator:${versions.spring_boot}"
    ]

    libs.spring_boot_test = [
            libs.spring_boot_starter_test = "org.springframework.boot:spring-boot-starter-test:${versions.spring_boot}"
    ]

    libs.slf4j = [
            libs.slf4j_api = "org.slf4j:slf4j-api:${versions.slf4j}",
            "org.slf4j:jul-to-slf4j:${versions.slf4j}",
            "org.slf4j:jcl-over-slf4j:${versions.slf4j}",
            "org.slf4j:log4j-over-slf4j:${versions.slf4j}",
    ]

    // database libraries
    libs.postgresql = "org.postgresql:postgresql:${versions.postgresql}"
    libs.flyway = "org.flywaydb:flyway-core:${versions.flyway}"

    libs.oauth2 = [
            'org.springframework.cloud:spring-cloud-starter-oauth2',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-oauth2-client',
            "org.springframework.security:spring-security-jwt:${versions.springSecurityJwt}"
    ]

    // swagger2
    libs.swagger2 = [
            libs.swagger2_core = "io.springfox:springfox-swagger2:${versions.swagger2}",
            libs.swagger2_ui = "io.springfox:springfox-swagger-ui:${versions.swagger2}",
    ]

    libs.gelf = [
            libs.logback_gelf = "biz.paluch.logging:logstash-gelf:${versions.logstash_gelf}"
    ]

    libs.logging_distributed = [
            libs.gelf
    ]

    libs.hamcrest = [
            libs.hamcrest_core = "org.hamcrest:hamcrest-core:${versions.hamcrest}",
            libs.hamcrest_library = "org.hamcrest:hamcrest-library:${versions.hamcrest}",
    ]
    libs.hamcrest_all = "org.hamcrest:hamcrest-all:${versions.hamcrest}"

    libs.hamcrest = [
            libs.hamcrest_core,
            libs.hamcrest_library
    ]

    // database libraries
    libs.h2database = "com.h2database:h2:${versions.h2}"

    // swagger2
    libs.swagger2 = [
            libs.swagger2_core = "io.springfox:springfox-swagger2:${versions.swagger2}",
            libs.swagger2_ui = "io.springfox:springfox-swagger-ui:${versions.swagger2}",
    ]
}

subprojects {
    ext {
        mapstructVersion = "1.2.0.Final"
    }

    [compileJava, compileTestJava]*.options*.encoding = 'utf-8'

    // apply plugin: 'checkstyle'
    task allDeps(type: DependencyReportTask) {}
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine' // No need in JUnit 4 for new projects.
    }
}

test {
    useJUnitPlatform()
}